//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AnalizadorLexico.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class AnalizadorLexicoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, NEWLINE=12, INT=13, CADENA=14, PALABRA=15, IGUAL=16, 
		DOSPUNTOS_IGUAL=17, PARENTESIS_ABRE=18, PARENTESIS_CIERRA=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "NEWLINE", "INT", "CADENA", "PALABRA", "IGUAL", "DOSPUNTOS_IGUAL", 
		"PARENTESIS_ABRE", "PARENTESIS_CIERRA"
	};


	public AnalizadorLexicoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AnalizadorLexicoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'fmt.Println'", "'var'", "'int'", "'float64'", "'string'", "'bool'", 
		"'rune'", "'*'", "'/'", "'+'", "'-'", null, null, null, null, "'='", "':='", 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NEWLINE", "INT", "CADENA", "PALABRA", "IGUAL", "DOSPUNTOS_IGUAL", "PARENTESIS_ABRE", 
		"PARENTESIS_CIERRA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnalizadorLexico.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnalizadorLexicoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,139,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,
		6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,4,11,94,8,11,11,11,
		12,11,95,1,11,1,11,1,12,4,12,101,8,12,11,12,12,12,102,1,13,1,13,1,13,1,
		13,5,13,109,8,13,10,13,12,13,112,9,13,1,13,1,13,1,14,4,14,117,8,14,11,
		14,12,14,118,1,14,3,14,122,8,14,1,14,4,14,125,8,14,11,14,12,14,126,3,14,
		129,8,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,0,0,19,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,1,0,5,3,0,9,10,13,13,32,32,1,0,48,57,2,0,34,34,39,39,
		3,0,10,10,13,13,34,34,2,0,65,90,97,122,146,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,1,39,1,0,0,0,3,51,1,0,0,0,5,55,1,0,0,0,7,59,1,0,0,0,9,67,1,0,0,0,11,
		74,1,0,0,0,13,79,1,0,0,0,15,84,1,0,0,0,17,86,1,0,0,0,19,88,1,0,0,0,21,
		90,1,0,0,0,23,93,1,0,0,0,25,100,1,0,0,0,27,104,1,0,0,0,29,116,1,0,0,0,
		31,130,1,0,0,0,33,132,1,0,0,0,35,135,1,0,0,0,37,137,1,0,0,0,39,40,5,102,
		0,0,40,41,5,109,0,0,41,42,5,116,0,0,42,43,5,46,0,0,43,44,5,80,0,0,44,45,
		5,114,0,0,45,46,5,105,0,0,46,47,5,110,0,0,47,48,5,116,0,0,48,49,5,108,
		0,0,49,50,5,110,0,0,50,2,1,0,0,0,51,52,5,118,0,0,52,53,5,97,0,0,53,54,
		5,114,0,0,54,4,1,0,0,0,55,56,5,105,0,0,56,57,5,110,0,0,57,58,5,116,0,0,
		58,6,1,0,0,0,59,60,5,102,0,0,60,61,5,108,0,0,61,62,5,111,0,0,62,63,5,97,
		0,0,63,64,5,116,0,0,64,65,5,54,0,0,65,66,5,52,0,0,66,8,1,0,0,0,67,68,5,
		115,0,0,68,69,5,116,0,0,69,70,5,114,0,0,70,71,5,105,0,0,71,72,5,110,0,
		0,72,73,5,103,0,0,73,10,1,0,0,0,74,75,5,98,0,0,75,76,5,111,0,0,76,77,5,
		111,0,0,77,78,5,108,0,0,78,12,1,0,0,0,79,80,5,114,0,0,80,81,5,117,0,0,
		81,82,5,110,0,0,82,83,5,101,0,0,83,14,1,0,0,0,84,85,5,42,0,0,85,16,1,0,
		0,0,86,87,5,47,0,0,87,18,1,0,0,0,88,89,5,43,0,0,89,20,1,0,0,0,90,91,5,
		45,0,0,91,22,1,0,0,0,92,94,7,0,0,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,
		0,0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,98,6,11,0,0,98,24,1,0,0,0,99,101,
		7,1,0,0,100,99,1,0,0,0,101,102,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,
		103,26,1,0,0,0,104,110,7,2,0,0,105,109,8,3,0,0,106,107,5,34,0,0,107,109,
		5,34,0,0,108,105,1,0,0,0,108,106,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,
		0,110,111,1,0,0,0,111,113,1,0,0,0,112,110,1,0,0,0,113,114,7,2,0,0,114,
		28,1,0,0,0,115,117,7,4,0,0,116,115,1,0,0,0,117,118,1,0,0,0,118,116,1,0,
		0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,122,5,95,0,0,121,120,1,0,0,0,121,
		122,1,0,0,0,122,128,1,0,0,0,123,125,7,1,0,0,124,123,1,0,0,0,125,126,1,
		0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,124,1,0,0,0,
		128,129,1,0,0,0,129,30,1,0,0,0,130,131,5,61,0,0,131,32,1,0,0,0,132,133,
		5,58,0,0,133,134,5,61,0,0,134,34,1,0,0,0,135,136,5,40,0,0,136,36,1,0,0,
		0,137,138,5,41,0,0,138,38,1,0,0,0,9,0,95,102,108,110,118,121,126,128,1,
		0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
