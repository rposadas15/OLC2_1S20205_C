//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AnalizadorLexico.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class AnalizadorLexicoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, NEWLINE=21, INT=22, DECIMAL=23, CARACTER=24, 
		CADENA=25, BOOL=26, PALABRA=27, IGUAL=28, DOSPUNTOS_IGUAL=29, PARENTESIS_ABRE=30, 
		PARENTESIS_CIERRA=31;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "NEWLINE", "INT", "DECIMAL", "CARACTER", "CADENA", 
		"BOOL", "PALABRA", "IGUAL", "DOSPUNTOS_IGUAL", "PARENTESIS_ABRE", "PARENTESIS_CIERRA"
	};


	public AnalizadorLexicoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AnalizadorLexicoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'fmt.Println'", "'var'", "'int'", "'float64'", "'string'", "'bool'", 
		"'rune'", "'*'", "'/'", "'+'", "'-'", "'&&'", "'||'", "'!'", "'=='", "'!='", 
		"'>='", "'>'", "'<='", "'<'", null, null, null, null, null, null, null, 
		"'='", "':='", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "NEWLINE", "INT", 
		"DECIMAL", "CARACTER", "CADENA", "BOOL", "PALABRA", "IGUAL", "DOSPUNTOS_IGUAL", 
		"PARENTESIS_ABRE", "PARENTESIS_CIERRA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnalizadorLexico.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnalizadorLexicoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,31,215,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,
		7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,
		14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,
		19,1,19,1,20,4,20,142,8,20,11,20,12,20,143,1,20,1,20,1,21,4,21,149,8,21,
		11,21,12,21,150,1,22,4,22,154,8,22,11,22,12,22,155,1,22,1,22,4,22,160,
		8,22,11,22,12,22,161,1,23,1,23,3,23,166,8,23,1,23,1,23,1,24,1,24,1,24,
		1,24,5,24,174,8,24,10,24,12,24,177,9,24,1,24,1,24,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,3,25,190,8,25,1,26,4,26,193,8,26,11,26,12,26,
		194,1,26,3,26,198,8,26,1,26,4,26,201,8,26,11,26,12,26,202,3,26,205,8,26,
		1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,0,0,31,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
		59,30,61,31,1,0,6,3,0,9,10,13,13,32,32,1,0,48,57,2,0,34,34,39,39,1,0,46,
		46,3,0,10,10,13,13,34,34,2,0,65,90,97,122,226,0,1,1,0,0,0,0,3,1,0,0,0,
		0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
		0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
		27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
		0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
		0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,75,1,0,0,0,5,79,1,0,0,0,7,83,1,0,0,
		0,9,91,1,0,0,0,11,98,1,0,0,0,13,103,1,0,0,0,15,108,1,0,0,0,17,110,1,0,
		0,0,19,112,1,0,0,0,21,114,1,0,0,0,23,116,1,0,0,0,25,119,1,0,0,0,27,122,
		1,0,0,0,29,124,1,0,0,0,31,127,1,0,0,0,33,130,1,0,0,0,35,133,1,0,0,0,37,
		135,1,0,0,0,39,138,1,0,0,0,41,141,1,0,0,0,43,148,1,0,0,0,45,153,1,0,0,
		0,47,163,1,0,0,0,49,169,1,0,0,0,51,189,1,0,0,0,53,192,1,0,0,0,55,206,1,
		0,0,0,57,208,1,0,0,0,59,211,1,0,0,0,61,213,1,0,0,0,63,64,5,102,0,0,64,
		65,5,109,0,0,65,66,5,116,0,0,66,67,5,46,0,0,67,68,5,80,0,0,68,69,5,114,
		0,0,69,70,5,105,0,0,70,71,5,110,0,0,71,72,5,116,0,0,72,73,5,108,0,0,73,
		74,5,110,0,0,74,2,1,0,0,0,75,76,5,118,0,0,76,77,5,97,0,0,77,78,5,114,0,
		0,78,4,1,0,0,0,79,80,5,105,0,0,80,81,5,110,0,0,81,82,5,116,0,0,82,6,1,
		0,0,0,83,84,5,102,0,0,84,85,5,108,0,0,85,86,5,111,0,0,86,87,5,97,0,0,87,
		88,5,116,0,0,88,89,5,54,0,0,89,90,5,52,0,0,90,8,1,0,0,0,91,92,5,115,0,
		0,92,93,5,116,0,0,93,94,5,114,0,0,94,95,5,105,0,0,95,96,5,110,0,0,96,97,
		5,103,0,0,97,10,1,0,0,0,98,99,5,98,0,0,99,100,5,111,0,0,100,101,5,111,
		0,0,101,102,5,108,0,0,102,12,1,0,0,0,103,104,5,114,0,0,104,105,5,117,0,
		0,105,106,5,110,0,0,106,107,5,101,0,0,107,14,1,0,0,0,108,109,5,42,0,0,
		109,16,1,0,0,0,110,111,5,47,0,0,111,18,1,0,0,0,112,113,5,43,0,0,113,20,
		1,0,0,0,114,115,5,45,0,0,115,22,1,0,0,0,116,117,5,38,0,0,117,118,5,38,
		0,0,118,24,1,0,0,0,119,120,5,124,0,0,120,121,5,124,0,0,121,26,1,0,0,0,
		122,123,5,33,0,0,123,28,1,0,0,0,124,125,5,61,0,0,125,126,5,61,0,0,126,
		30,1,0,0,0,127,128,5,33,0,0,128,129,5,61,0,0,129,32,1,0,0,0,130,131,5,
		62,0,0,131,132,5,61,0,0,132,34,1,0,0,0,133,134,5,62,0,0,134,36,1,0,0,0,
		135,136,5,60,0,0,136,137,5,61,0,0,137,38,1,0,0,0,138,139,5,60,0,0,139,
		40,1,0,0,0,140,142,7,0,0,0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,0,
		0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,146,6,20,0,0,146,42,1,0,0,0,147,
		149,7,1,0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,0,150,151,1,
		0,0,0,151,44,1,0,0,0,152,154,7,1,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,
		153,1,0,0,0,155,156,1,0,0,0,156,157,1,0,0,0,157,159,5,46,0,0,158,160,7,
		1,0,0,159,158,1,0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,
		162,46,1,0,0,0,163,165,7,2,0,0,164,166,7,3,0,0,165,164,1,0,0,0,165,166,
		1,0,0,0,166,167,1,0,0,0,167,168,7,2,0,0,168,48,1,0,0,0,169,175,7,2,0,0,
		170,174,8,4,0,0,171,172,5,34,0,0,172,174,5,34,0,0,173,170,1,0,0,0,173,
		171,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,178,1,
		0,0,0,177,175,1,0,0,0,178,179,7,2,0,0,179,50,1,0,0,0,180,181,5,116,0,0,
		181,182,5,114,0,0,182,183,5,117,0,0,183,190,5,101,0,0,184,185,5,102,0,
		0,185,186,5,97,0,0,186,187,5,108,0,0,187,188,5,115,0,0,188,190,5,101,0,
		0,189,180,1,0,0,0,189,184,1,0,0,0,190,52,1,0,0,0,191,193,7,5,0,0,192,191,
		1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,
		0,196,198,5,95,0,0,197,196,1,0,0,0,197,198,1,0,0,0,198,204,1,0,0,0,199,
		201,7,1,0,0,200,199,1,0,0,0,201,202,1,0,0,0,202,200,1,0,0,0,202,203,1,
		0,0,0,203,205,1,0,0,0,204,200,1,0,0,0,204,205,1,0,0,0,205,54,1,0,0,0,206,
		207,5,61,0,0,207,56,1,0,0,0,208,209,5,58,0,0,209,210,5,61,0,0,210,58,1,
		0,0,0,211,212,5,40,0,0,212,60,1,0,0,0,213,214,5,41,0,0,214,62,1,0,0,0,
		13,0,143,150,155,161,165,173,175,189,194,197,202,204,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
